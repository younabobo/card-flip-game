{"version":3,"sources":["Cards.jsx","App.jsx","serviceWorker.js","utils.js","sagas.js","index.js"],"names":["Cards","cards","onClick","flipped","omitted","attempts","finished","onChangeSize","onReset","x","length","style","margin","marginTop","width","display","justifyContent","gridTemplateColumns","Array","join","split","map","card","index","className","includes","top","src","height","alt","slice","htmlFor","marginRight","id","type","document","getElementById","value","defaultProps","ProppedCards","connect","dispatch","size","App","color","Boolean","window","location","hostname","match","allCards","i","String","getSubset","set","reduce","acc","cur","ind","filter","Math","floor","random","duplicate","arr","shuffle","sort","handle","verifySaga","delay","ms","Promise","res","setTimeout","put","action","takeLeading","sagaMiddleware","createSagaMiddleware","store","createStore","state","console","log","Number","applyMiddleware","run","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.975cdd56.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, InputNumber, Form } from \"antd\";\nimport \"./Cards.css\";\n\nfunction Cards({\n  cards,\n  onClick,\n  flipped,\n  omitted,\n  attempts,\n  finished,\n  onChangeSize,\n  onReset,\n}) {\n  const x = cards.length;\n  return (\n    <div>\n      <p>Failed attempts: {attempts}</p>\n      <div\n        style={{\n          margin: \"auto\",\n          marginTop: 50,\n          width: \"90vw\",\n          display: \"grid\",\n          justifyContent: \"space-evenly\",\n          gridTemplateColumns: Array(x < 6 ? 5 : x < 12 ? 6 : x < 24 ? 6 : 10)\n            .join()\n            .split(\",\")\n            .map((x) => \"auto\")\n            .join(\" \"),\n        }}\n      >\n        {cards.map((card, index) => (\n          <div className=\"grid-item\">\n            <div\n              className={\n                \"flip-card-inner\" +\n                \" \" +\n                (flipped.includes(index) ? \"flip-card-rotated\" : \"\") +\n                \" \" +\n                (omitted.includes(index) ? \"flip-card-omitted\" : \"\")\n              }\n              onClick={() => !omitted.includes(index) && onClick(index)}\n            >\n              <div\n                className=\"flip-card-front\"\n                style={{ top: (x < 20 ? 200 : 100) * index }}\n              >\n                <img\n                  src=\"images/back.png\"\n                  width={x < 20 ? 200 : 100}\n                  height={x < 20 ? 200 : 100}\n                  alt=\"back\"\n                />\n              </div>\n              <div\n                className=\"flip-card-back\"\n                style={{\n                  top: (x < 20 ? 200 : 100) * index,\n                  marginTop: -(x < 20 ? 200 : 100),\n                }}\n              >\n                <img\n                  className=\"image\"\n                  src={card}\n                  width={x < 20 ? 200 : 100}\n                  height={x < 20 ? 200 : 100}\n                  alt={card.slice(7)}\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      <p>{finished && \"Game over! Congratulations!!\"}</p>\n      <div>\n        <label htmlFor=\"size\" style={{ marginRight: 10 }}>\n          Set size\n        </label>\n        <InputNumber id=\"size\" style={{ marginRight: 10 }} />\n        <Button\n          type=\"primary\"\n          style={{ marginRight: 50 }}\n          onClick={() => {\n            onChangeSize(document.getElementById(\"size\").value);\n          }}\n        >\n          Validate\n        </Button>\n        <Button type=\"secondary\" onClick={onReset}>\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n}\nCards.defaultProps = {\n  flipped: [],\n  omitted: [],\n};\nconst mapStateToProps = ({ cards, flipped, omitted, finished, attempts }) => ({\n  cards,\n  flipped,\n  omitted,\n  finished,\n  attempts,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  onClick: (index) => dispatch({ type: \"CLICK\", index }),\n  onChangeSize: (size) => dispatch({ type: \"resize\", size }),\n  onReset: () => dispatch({ type: \"reset\" }),\n});\n\nconst ProppedCards = connect(mapStateToProps, mapDispatchToProps)(Cards);\n\nexport default ProppedCards;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport Cards from \"./Cards\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 style={{ color: \"white\" }}>Find the pair</h1>\n      </header>\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function reverse_combinations(x) {\n  return x.length > 3\n    ? [x, ...reverse_combinations(x.slice(0, -1))]\n    : x.length > 2\n    ? [x, reverse_combinations(x.slice(0, -1))]\n    : x;\n}\nfunction forward_combinations(x) {\n  return x.length > 3\n    ? [...reverse_combinations(x), ...forward_combinations(x.slice(1))]\n    : x.length > 2\n    ? [...reverse_combinations(x), forward_combinations(x.slice(1))]\n    : x.length > 1\n    ? x\n    : [];\n}\n/**\n * Function that generates a few combinations of elements from an Array\n * @param {Array} x Set of elements\n */\nexport const combinations = (x) =>\n  x.length === 2\n    ? [forward_combinations(x)].concat(x.map((x) => [x]))\n    : forward_combinations(x).concat(x.map((x) => [x]));\n/**\n * Function that returns the factorial of an integer\n * @param {BigInteger} x The argument\n */\nexport const fact = (x) => (x > 1 ? x * fact(x - 1) : 1);\n\nexport const allCards = Array(21)\n  .join()\n  .split(\",\")\n  .map((x, i) => \"images/\" + String(i) + \".jpg\");\nexport const getSubset = (set, size) =>\n  Array(size)\n    .join()\n    .split(\",\")\n    .reduce(\n      (acc, cur, ind) => [\n        ...acc,\n        set.filter((x) => !acc.includes(x))[\n          Math.floor(Math.random() * (21 - ind))\n        ],\n      ],\n      []\n    );\nexport const duplicate = (arr) =>\n  arr.reduce((acc, cur) => [...acc, cur, cur], []);\nexport const shuffle = (arr) => arr.sort((x) => Math.random() - 0.5);\n","import { put, takeLeading } from \"redux-saga/effects\";\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\nfunction* handle({ index }) {\n  yield put({ type: \"click\", index });\n  yield delay(1000);\n  yield put({ type: \"verify\", index });\n}\n\nexport function* verifySaga(action) {\n  yield takeLeading(\"CLICK\", handle);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { allCards, shuffle, duplicate, getSubset } from \"./utils\";\nimport { verifySaga } from \"./sagas\";\nimport \"antd/dist/antd.css\";\nconst sagaMiddleware = createSagaMiddleware();\n\nfunction reducer(\n  state = {\n    size: 6, // Default size is 6\n    cards: shuffle(duplicate(getSubset(allCards, 6))), // Array of all cards\n    flipped: [], // Array of size 0-2 | Represents the indexes of cards currently flipped\n    omitted: [], // Array of size 0-size*2 | represents the indexes of cards currently omitted\n    attempts: 0, // Number representing the amount of attempts made\n    finished: false, // Boolean representing if the game is over\n  },\n  action\n) {\n  console.log(action);\n  if (action.type === \"click\") {\n    if (state.flipped.includes(action.index))\n      state = {\n        ...state,\n        flipped: state.flipped.filter((x) => x !== action.index),\n      };\n    else {\n      state = { ...state, flipped: [...state.flipped, action.index] };\n    }\n  }\n  if (action.type === \"verify\") {\n    if (state.flipped.length % 2 === 0) {\n      if (\n        state.cards[state.flipped[state.flipped.length - 1]] ===\n        state.cards[state.flipped[state.flipped.length - 2]]\n      ) {\n        state = {\n          ...state,\n          omitted: [\n            ...state.omitted,\n            state.flipped[state.flipped.length - 1],\n            state.flipped[state.flipped.length - 2],\n          ],\n        };\n      } else {\n        state = {\n          ...state,\n          flipped: state.flipped.slice(0, -2),\n          attempts: state.attempts + 1,\n        };\n      }\n    }\n  }\n  if (action.type === \"reset\") {\n    state = {\n      ...state,\n      cards: shuffle(duplicate(getSubset(allCards, state.size))),\n      flipped: [],\n      omitted: [],\n      attempts: 0,\n      finished: false,\n    };\n  }\n  if (action.type === \"resize\") {\n    state = {\n      size: Number(action.size),\n      cards: shuffle(duplicate(getSubset(allCards, Number(action.size)))),\n      flipped: [],\n      omitted: [],\n      attempts: 0,\n      finished: false,\n    };\n  }\n  if (state.omitted.length === state.size * 2) state.finished = true;\n  return state;\n}\n\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\nconsole.log(verifySaga);\nsagaMiddleware.run(verifySaga);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}